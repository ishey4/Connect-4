{"version":3,"sources":["Block.js","Player.js","GameProperties.js","App.js","index.js"],"names":["BlocksObj","props","Object","classCallCheck","this","filled","player","undefined","assign","createClass","key","value","height","width","blockArray","w","h","Block","_React$Component","possibleConstructorReturn","getPrototypeOf","call","inherits","bc","color","react_default","a","createElement","className","style","backgroundColor","React","Component","BlockColumn","_React$Component2","_this","clk","oc","ary","onClick","map","e","Block_Block","PlayerObj","name","pcs","isWinner","Player","prop","nv","target","updateValues","type","onChange","updateProp","Remove","GamePropertiesObj","currentTurn","winner","GameProperties","NG","H","state","W","console","log","assertThisInitialized","options","GameBoard","GameProps","newGame","$this","val","setState","k","updateCurrentTurn","Players","p","id","setVal","connect4","newGameProps","pt","filter","counter","nextPlayer","colorList","MOVMENTDIRECTIONS","bind","CreateGameBoard","gp","placePiece","checkForWinner","forEach","oldVals","_this2","old","newVals","ind","indexOf","np","splice","BlockRow","placedPiece","cp","PiecePlaced","length","turn","_this3","newKey","pl","toString","pop","updateVals","removePlayer","newArray","concat","StartBlock","direction","count","getContinuousBlockCount","place","dir","blockLocation","_this4","dr","addDir","invDr","_this5","window","GameProperties_GameProperties","Block_BlockColumn","addPlayer","Player_Player","ReactDOM","render","App","document","getElementById"],"mappings":"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","file":"static/js/main.1ec021b5.chunk.js","sourcesContent":["\r\nimport React, { Component } from 'react';\r\nimport './connect-4.css';\r\n\r\nexport class BlocksObj {\r\n    filled = false;\r\n    player = undefined;\r\n\r\n    constructor(props) {\r\n        Object.assign(this, props)\r\n    }\r\n\r\n    CreateGameBoard(height, width) {\r\n        let blockArray = [];\r\n        blockArray[0] = [];\r\n        blockArray[0][0] = this;\r\n\r\n        for (let w = 0; w < width; w++) {\r\n            for (let h = 0; h < height; h++) {\r\n                if (!blockArray[w]) { blockArray[w] = [] }\r\n                if (!blockArray[w][h]) { blockArray[w][h] = new BlocksObj({ h: h, w: w }) }\r\n            }\r\n        }\r\n        return blockArray;\r\n    }\r\n}\r\n\r\nexport class Block extends React.Component {\r\n\r\n    render() {\r\n        let bc = (this.props.player && this.props.player.color) || 'rgba(255,255,255,0)'\r\n        return (\r\n            <div className=\"Block\" style={{ backgroundColor: bc }}>\r\n                <div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n}\r\n\r\nexport class BlockColumn extends React.Component {\r\n    clk = () => { this.props.oc(this.props.ary) }\r\n    render() {\r\n        let ary = this.props.ary;\r\n        return (\r\n            <div className=\"Column\" onClick={this.clk}>\r\n                {this.props.ary.map((e) => {\r\n                    return (<Block {...e} />)\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './connect-4.css';\r\n\r\nexport class PlayerObj {\r\n    name = undefined;\r\n    pcs = undefined;\r\n    color = undefined;\r\n    isWinner = false;\r\n    constructor(props) {\r\n        Object.assign(this, props)\r\n    }\r\n}\r\n\r\n\r\nexport class Player extends React.Component {\r\n    updateProp(prop) {\r\n        return (e) => {\r\n            let nv = {}\r\n            nv[prop] = e.target.value\r\n            this.props.updateValues(nv);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"PlayerContainer\">\r\n                <div className={'player ' + (this.props.isWinner ? 'winner' : '')}>\r\n                    <label>Name: <input type=\"text\" value={this.props.name} onChange={this.updateProp('name')} /></label>\r\n                    <label>Color: <input type=\"text\" value={this.props.color} onChange={this.updateProp('color')} /></label>\r\n                    <input type=\"button\" value=\"Remove\" onClick={this.props.Remove} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './connect-4.css';\r\n\r\nexport class GamePropertiesObj {\r\n    currentTurn = 0;\r\n    winner = undefined;\r\n    updateCurrentTurn;\r\n    constructor(props) {\r\n        Object.assign(this, props)\r\n    }\r\n}\r\n\r\n\r\nexport class GameProperties extends React.Component {\r\n\r\n    NG = () => {\r\n        let H = this.state.H\r\n        let W = this.state.W\r\n        console.log(this)\r\n        let options = {};\r\n        if (H > 0 && W > 0) {\r\n            options = { GameBoard: { h: H, w: W } }\r\n        }\r\n        console.log(options)\r\n        this.props.GameProps.newGame(options)\r\n    }\r\n\r\n    setVal(props) {\r\n        let $this = this\r\n        return function (val) {\r\n            let a = $this.state\r\n            a[props] = val.target.value;\r\n            $this.setState(a);\r\n        }\r\n    }\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"CurrentTurn\">\r\n                    Current Turn:\r\n                    <select value={this.props.GameProps.currentTurn.k} onChange={this.props.GameProps.updateCurrentTurn}>\r\n                        {this.props.Players.map((p) => { return <option key={p.k} value={p.k}>{p.name}</option> })}\r\n                    </select>\r\n                </div>\r\n                <div className={'Winner ' + (this.props.GameProps.winner===undefined ? 'hidden' :'') }>Winner:{(this.props.GameProps.winner && this.props.GameProps.winner.name)}</div>\r\n                <div className=\"NewGame\">\r\n                    <label>Board:\r\n                        <input id=\"BoardH\" type=\"number\" onClick={this.setVal(\"H\")} />\r\n                        x\r\n                        <input id=\"BoardW\" type=\"number\" onClick={this.setVal(\"W\")} />\r\n                        <input type=\"button\" value=\"New Game\" onClick={this.NG}>\r\n                        </input>\r\n                    </label>\r\n                </div>\r\n            </div>\r\n        )\r\n    };\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {}\r\n\r\n    }\r\n}","import React, { Component } from 'react';\nimport './connect-4.css';\nimport { BlocksObj, BlockColumn, Block } from './Block'\nimport { Player, PlayerObj } from './Player'\nimport { GamePropertiesObj, GameProperties } from './GameProperties'\n\n\nclass connect4 extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {};\n    Object.assign(this.state, this.options)\n    this.state.counter = this.counter();\n    this.state.GameProps = new GamePropertiesObj({\n      updateCurrentTurn: this.updateCurrentTurn,\n      k: this.state.counter(),\n      nextPlayer: (this.nextPlayer),\n      colorList: ['red', 'green', 'blue', 'yellow','purple'],\n      MOVMENTDIRECTIONS: [{ h: 1, w: 0 }, { h: 0, w: 1 }, { h: 1, w: 1 }, { h: -1, w: 1 }],\n      newGame: this.newGame.bind(this)\n    });\n    this.state.Players = []\n    this.newGame();\n  }\n\n  newGame(options) {\n    options = Object.assign({ GameBoard: { h: 6, w: 7 }, GameProps: { winner: undefined } }, options)\n    this.state.GameBoard = new BlocksObj().CreateGameBoard(options.GameBoard.h, options.GameBoard.w);\n    let gp = {\n      placePiece: this.placePiece.bind(this),\n      checkForWinner: this.checkForWinner.bind(this),\n      winner: undefined\n    }\n    this.state.Players.forEach(player=>{player.isWinner=false;})\n    Object.assign(this.state.GameProps, gp)\n    this.setState(this.state)\n  }\n\n  updateCurrentTurn = (player) => {\n    let newGameProps = this.state.GameProps;\n    let pt = player.target.value\n    newGameProps.currentTurn = this.state.Players.filter(p => { return p.k == pt })[0]\n    this.setState({ GameProps: newGameProps })\n  }\n\n  counter() { let a = 0; return () => { a = a + 1; return a } }\n\n  updateVals(oldVals) {\n    let old = oldVals\n    return (newVals) => {\n      let ind = this.state.Players.indexOf(old)\n      let np = Object.assign(this.state.Players[ind], newVals);\n      this.state.Players.splice(ind, 1, np)\n      this.setState({ Players: this.state.Players });\n    }\n\n  }\n\n  placePiece(BlockRow, nextPlayer) {\n    if (!this.state.GameProps.winner) {\n      let cp = this.state.GameProps.currentTurn\n      let PiecePlaced = false;\n      let placedPiece;\n      for (let h = 0; h < BlockRow.length; h++) {\n        if (BlockRow[h].player && !PiecePlaced) {\n          placedPiece = BlockRow[h - 1]\n          placedPiece.player = cp;\n          PiecePlaced = true;\n        }\n      }\n      if (!PiecePlaced) {\n        placedPiece = BlockRow[BlockRow.length - 1]\n        placedPiece.player = cp\n      };\n\n      this.state.GameProps.checkForWinner({ h: placedPiece.h, w: placedPiece.w }, cp)\n      this.setState({ GameBoard: this.state.GameBoard })\n    }\n  }\n\n  nextPlayer() {\n    let ind = this.state.Players.indexOf(this.state.GameProps.currentTurn) + 1;\n    let turn;\n    if (ind >= this.state.Players.length) { turn = this.state.Players[0]; }\n    else { turn = this.state.Players[ind]; }\n    let gp = this.state.GameProps;\n    gp.currentTurn = turn;\n    this.setState({ GameProps: gp });\n    return gp;\n  }\n\n  addPlayer() {\n    let newKey = this.state.counter()\n    let pl = new PlayerObj({ name: 'Player' + (newKey-1).toString(), color: this.state.GameProps.colorList.pop() });\n    pl.k = newKey;\n    pl.updateValues = this.updateVals.bind(this)(pl);\n    pl.Remove = () => { this.removePlayer(pl) };\n    let newArray = this.state.Players.concat(pl);\n    this.setState({\n      Players: newArray,\n      GameProps:\n        Object.assign(this.state.GameProps, { nextPlayer: () => this.nextPlayer(),currentTurn:pl })\n    });\n  }\n\n  removePlayer(player) {\n    let ind = this.state.Players.indexOf(player)\n    this.state.Players.splice(ind, 1)\n    this.setState({ Players: this.state.Players })\n  }\n\n  getContinuousBlockCount(StartBlock, player, direction, count) {\n    if (this.state.GameBoard[StartBlock.w] && this.state.GameBoard[StartBlock.w][StartBlock.h] && this.state.GameBoard[StartBlock.w][StartBlock.h].player === player) {\n      return this.getContinuousBlockCount({ h: StartBlock.h + direction.h, w: StartBlock.w + direction.w }, player, direction, (count + 1))\n    }\n    return count\n  }\n\n  addDir(place, dir) {\n    return { h: place.h + dir.h, w: place.w + dir.w }\n  }\n\n  checkForWinner(blockLocation, player, direction, count) {\n    if (!this.state.GameProps.winner) {\n      if (!direction) {\n        this.state.GameProps.MOVMENTDIRECTIONS.forEach(dr => {\n          let a = this.getContinuousBlockCount(this.addDir(blockLocation, dr), player, dr, 1)\n          let invDr = { h: dr.h * -1, w: dr.w * -1 }\n          let b = this.getContinuousBlockCount(this.addDir(blockLocation, invDr), player, invDr, 1)\n          if ((a + b) >= 5) {\n            player.isWinner=true;\n            this.setState({Players:this.state.Players})\n            this.setState(Object.assign(this.state.GameProps, { winner: player }));\n          }\n        });\n      }\n    }\n  };\n\n  render() {\n    window['state'] = this.state\n    let clk = (ary) => {\n      this.state.GameProps.placePiece(ary, this.state.GameProps.nextPlayer)\n      this.state.GameProps.nextPlayer()\n    }\n    return (\n      <div className=\"connect-4\">\n      <h1>!Connect 4!</h1>\n      <div className=\"left side\">\n      <GameProperties {...this.state} key={this.state.GameProps.k} />\n      <div id=\"GameBoard\">\n          {this.state.GameBoard.map((h) => {\n            return <BlockColumn ary={h} oc={clk} />\n          })}\n        </div>\n      </div>\n\n      <div className=\"right side\">\n      <div className=\"bold largeFont\">Settings</div>\n      <div className=\"addPlayer\"><span onClick={this.addPlayer.bind(this)}>(Add Player)</span></div>\n      {this.state.Players.map(p => {return <Player {...p} key={p.k} />})}\n      </div>\n\n\n\n\n      </div>\n    );\n  }\n}\n\nexport default connect4;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}